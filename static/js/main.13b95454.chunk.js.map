{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","_ref","isLit","flipCellsAroundMe","classes","react_default","a","createElement","className","onClick","Board","nrows","ncols","chanceLightStartsOn","_useState","useState","board","Object","toConsumableArray","Array","map","x","i","j","Math","random","createBoard","_useState2","slicedToArray","setBoard","_useState3","_useState4","hasWon","setHasWon","tblBoard","row","rowIndex","key","cell","columnIndex","src_Cell_0","concat","y","newBoard","flipCell","col","win","every","flipCellsAround","makeTable","App","src_Board_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTASeA,SANF,SAAAC,GAAkC,IAA/BC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,kBACjBC,EAAU,QAAUF,EAAQ,YAAc,IAE9C,OAAOG,EAAAC,EAAAC,cAAA,MAAIC,UAAWJ,EAASK,QAASN,MCuF3BO,SAzFD,WACZ,IAMQC,EALC,EAKMC,EAJN,EAIaC,EAHC,GAJLC,EAkEQC,mBAzDN,WAGlB,IAFA,IAAIC,EAAQC,OAAAC,EAAA,EAAAD,CAAIE,MAAMR,IAAQS,IAAI,SAAAC,GAAC,OAAIF,MAAMP,KAEpCU,EAAI,EAAGA,EAAIX,EAAOW,IACzB,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAOW,IACzBP,EAAMM,GAAGC,GAAKC,KAAKC,SAAWZ,EAIlC,OAAOG,EAgD0BU,IAlEjBC,EAAAV,OAAAW,EAAA,EAAAX,CAAAH,EAAA,GAkEXE,EAlEWW,EAAA,GAkEJE,EAlEIF,EAAA,GAAAG,EAmEUf,oBAAS,GAnEnBgB,EAAAd,OAAAW,EAAA,EAAAX,CAAAa,EAAA,GAmEXE,EAnEWD,EAAA,GAmEHE,EAnEGF,EAAA,GAqElB,OACE1B,EAAAC,EAAAC,cAAA,WACGyB,EACC3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,OACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,SAGFH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,QAlCQ,WAChB,IAAM0B,EAAWlB,EAAMI,IAAI,SAACe,EAAKC,GAAN,OACzB/B,EAAAC,EAAAC,cAAA,MAAI8B,IAAKD,GACND,EAAIf,IAAI,SAACkB,EAAMC,GAAP,OACPlC,EAAAC,EAAAC,cAACiC,EAAD,CACEH,IAAG,GAAAI,OAAKL,EAAL,KAAAK,OAAiBF,GACpBrC,MAAOoC,EACPnC,kBAAmB,kBA9BL,SAACuC,EAAGrB,GAC1B,IAAMsB,EAAQ1B,OAAAC,EAAA,EAAAD,CAAOD,GAEf4B,EAAW,SAACT,EAAKU,GACjBA,GAAO,GAAKA,EAAMjC,GAASuB,GAAO,GAAKA,EAAMxB,IAC/CgC,EAASR,GAAKU,IAAQ7B,EAAMmB,GAAKU,KAIrCD,EAASF,EAAGrB,GACZuB,EAASF,EAAGrB,EAAI,GAChBuB,EAASF,EAAGrB,EAAI,GAChBuB,EAASF,EAAI,EAAGrB,GAChBuB,EAASF,EAAI,EAAGrB,GAGhB,IAAMyB,EAAM9B,EAAM+B,MAAM,SAAAZ,GAAG,OAAIA,EAAIY,MAAM,SAAAT,GAAI,OAAa,IAATA,MACjDT,EAASc,GACTV,EAAUa,GAYuBE,CAAgBZ,EAAUG,WAM3D,OACElC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACfH,EAAAC,EAAAC,cAAA,aAAQ2B,IAqBLe,OCtEIC,0LARX,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4C,EAAD,cAJUC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.13b95454.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.css';\n\nconst Cell = ({ isLit, flipCellsAroundMe }) => {\n  let classes = 'Cell' + (isLit ? ' Cell-lit' : '');\n\n  return <td className={classes} onClick={flipCellsAroundMe} />;\n};\n\nexport default Cell;\n","import React, { useState } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\nconst Board = () => {\n  const CONFIG = {\n    nrows: 3,\n    ncols: 4,\n    chanceLightStartsOn: 0.5\n  };\n\n  const { nrows, ncols, chanceLightStartsOn } = CONFIG;\n\n  const createBoard = () => {\n    let board = [...Array(nrows)].map(x => Array(ncols));\n\n    for (let i = 0; i < nrows; i++) {\n      for (let j = 0; j < ncols; j++) {\n        board[i][j] = Math.random() < chanceLightStartsOn ? true : false;\n      }\n    }\n\n    return board;\n  };\n\n  /** handle changing a cell: update board & determine if winner */\n\n  const flipCellsAround = (y, x) => {\n    const newBoard = [...board];\n\n    const flipCell = (row, col) => {\n      if (col >= 0 && col < ncols && row >= 0 && row < nrows) {\n        newBoard[row][col] = !board[row][col];\n      }\n    };\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y, x + 1);\n    flipCell(y, x - 1);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n\n    // TODO: determine is the game has been won\n    const win = board.every(row => row.every(cell => cell === false));\n    setBoard(newBoard);\n    setHasWon(win);\n    // setHasWon(true);\n  };\n\n  /** Render game board or winning message. */\n  const makeTable = () => {\n    const tblBoard = board.map((row, rowIndex) => (\n      <tr key={rowIndex}>\n        {row.map((cell, columnIndex) => (\n          <Cell\n            key={`${rowIndex}-${columnIndex}`}\n            isLit={cell}\n            flipCellsAroundMe={() => flipCellsAround(rowIndex, columnIndex)}\n          />\n        ))}\n      </tr>\n    ));\n\n    return (\n      <table className='Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  };\n\n  const [board, setBoard] = useState(createBoard());\n  const [hasWon, setHasWon] = useState(false);\n\n  return (\n    <div>\n      {hasWon ? (\n        <div className='winner'>\n          <span className='neon-orange'>YOU</span>\n          <span className='neon-blue'>WIN!</span>\n        </div>\n      ) : (\n        <div>\n          <div className='Board-title'>\n            <div className='neon-orange'>Lights</div>\n            <div className='neon-blue'>Out</div>\n          </div>\n          {makeTable()}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}